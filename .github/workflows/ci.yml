name: CI

on:
  # Trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic Version Tag for Docker image'
        required: true
        default: '1.0.0'

jobs:

  Build_and_Testing:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
    steps:
      # Checkout Repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      # Setup JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # Build with Maven
      - name: Build with Maven
        run: mvn clean package


      # - - - Artifact - - -
      # Upload Coverage as artifact
      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco/jacoco.xml

      # Upload compiled classes as artifact
      - name: Upload compiled classes
        uses: actions/upload-artifact@v4
        with:
          name: compiled-classes
          path: target/classes


      # - - - Reporter - - -
      # Test Report Dashboard
      - name: Test Report
        uses: dorny/test-reporter@v1
        with:
          name: Surefire-report
          path: target/surefire-reports/*.xml
          reporter: java-junit


          
  Analyse:
    needs: [Build_and_Testing]
    runs-on: ubuntu-latest
    steps:
      # Checkout Repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download Coverage
      - name: Download Coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco/

      # Download compiled classes
      - name: Download compiled classes
        uses: actions/download-artifact@v4
        with:
          name: compiled-classes
          path: target/classes
        
      # SonarQube scan
      - name: SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=DevOpsCalc \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
            -Dsonar.java.binaries=target/classes \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.qualitygate.timeout=60

      # Checkstyle Lint
      - name: Run Checkstyle
        run: mvn checkstyle:check -Dcheckstyle.failOnViolation=true


  Docker:
      needs: [Build_and_Testing, Analyse]
      runs-on: ubuntu-latest        
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      steps:

      # Checkout Repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Download compiled classes
      - name: Download compiled classes
        uses: actions/download-artifact@v4
        with:
          name: compiled-classes
          path: target/classes
        
      # Prepare dependencies for Docker build
      - name: Copy dependencies for Docker
        run: mvn dependency:copy-dependencies -DskipTests
          
      # Docker Login
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      # Build Docker Image and push via Fabric8
      - name: Build & Push Docker image
        run: |
          echo "Using Docker tag: ${{ github.event.inputs.version }}"
          mvn io.fabric8:docker-maven-plugin:0.41.0:build \
            io.fabric8:docker-maven-plugin:0.41.0:push \
            -Ddocker.username=${DOCKER_USERNAME} \
            -Ddocker.password=${DOCKER_PASSWORD} \
            -Ddocker.image.tag=${{ github.event.inputs.version }} \
            -DskipTests


  CleanUp:
    needs: [Docker]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      actions: write
    steps:
      # Delete internal build artifacts
      - name: Delete internal build artifacts
        uses: geekyeggo/delete-artifact@v4
        with:
          name: |
            compiled-classes
            coverage-report 
        continue-on-error: true
        # coverage-report is already in sonar visible 

        # Docker logout 
      - name: Docker Logout
        run: docker logout
        
